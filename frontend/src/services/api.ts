// API Service for URL Shortener
const API_BASE = "/api";

export interface UrlData {
  originalUrl: string;
  shortUrl: string;
  shortCode: string;
  qrCode?: string; // Optional for guest users
  clicks: number;
  createdAt: string;
}

export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
}

// Get auth headers
function getAuthHeaders(): HeadersInit {
  const token = localStorage.getItem("token");
  const headers: HeadersInit = {
    "Content-Type": "application/json",
  };

  if (token) {
    headers["Authorization"] = `Bearer ${token}`;
  }

  return headers;
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Short URL (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á guest ‡πÅ‡∏•‡∏∞ user)
export async function createShortUrl(
  url: string
): Promise<ApiResponse<UrlData>> {
  const response = await fetch(`${API_BASE}/shorten`, {
    method: "POST",
    headers: getAuthHeaders(),
    credentials: "include", // ‡∏™‡πà‡∏á cookies
    body: JSON.stringify({ url }),
  });

  return response.json();
}

// ‡∏î‡∏∂‡∏á URL ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin/development)
export async function getAllUrls(): Promise<ApiResponse<UrlData[]>> {
  const response = await fetch(`${API_BASE}/urls`);
  return response.json();
}

// ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ URL ‡∏Ç‡∏≠‡∏á user ‡∏ó‡∏µ‡πà login (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ token)
export async function getMyUrls(): Promise<ApiResponse<UrlData[]>> {
  const response = await fetch(`${API_BASE}/my-urls`, {
    headers: getAuthHeaders(),
    credentials: "include",
  });
  return response.json();
}

// ‡∏î‡∏∂‡∏á Analytics
export async function getAnalytics(
  shortCode: string
): Promise<ApiResponse<any>> {
  const response = await fetch(`${API_BASE}/analytics/${shortCode}`);
  return response.json();
}

// ‡∏•‡∏ö URL
export async function deleteUrl(shortCode: string): Promise<ApiResponse<any>> {
  const response = await fetch(`${API_BASE}/urls/${shortCode}`, {
    method: "DELETE",
  });
  return response.json();
}

// =============== Admin API ===============

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ User ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
export async function getAdminUsers(): Promise<ApiResponse<any>> {
  const headers = getAuthHeaders();
  console.log("üì° Calling GET /api/admin/users with headers:", headers);
  const response = await fetch(`${API_BASE}/admin/users`, {
    headers,
    credentials: "include",
  });
  console.log("üì• Response status:", response.status, response.statusText);
  const data = await response.json();
  console.log("üì¶ Response data:", data);
  return data;
}

// ‡∏î‡∏∂‡∏á URL ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å User (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
export async function getAdminAllUrls(): Promise<ApiResponse<any>> {
  const headers = getAuthHeaders();
  console.log("üì° Calling GET /api/admin/all-urls with headers:", headers);
  const response = await fetch(`${API_BASE}/admin/all-urls`, {
    headers,
    credentials: "include",
  });
  console.log("üì• Response status:", response.status, response.statusText);
  const data = await response.json();
  console.log("üì¶ Response data:", data);
  return data;
}

// ‡∏•‡∏ö URL ‡πÇ‡∏î‡∏¢ Admin
export async function deleteAdminUrl(
  shortCode: string
): Promise<ApiResponse<any>> {
  const headers = getAuthHeaders();
  const response = await fetch(`${API_BASE}/admin/urls/${shortCode}`, {
    method: "DELETE",
    headers,
    credentials: "include",
  });
  return response.json();
}

// ‡∏•‡∏ö User ‡πÇ‡∏î‡∏¢ Admin
export async function deleteAdminUser(
  userId: string
): Promise<ApiResponse<any>> {
  const headers = getAuthHeaders();
  console.log(
    "üì° Calling DELETE /api/admin/users/" + userId + " with headers:",
    headers
  );
  const response = await fetch(`${API_BASE}/admin/users/${userId}`, {
    method: "DELETE",
    headers,
    credentials: "include",
  });
  console.log(
    "üì• Delete user response status:",
    response.status,
    response.statusText
  );
  const data = await response.json();
  console.log("üì¶ Delete user response data:", data);
  return data;
}
