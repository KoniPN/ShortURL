import express, { Request, Response } from "express";
import db from "../database.js";
import { requireAdmin } from "../middleware/auth.js";
import type { ApiResponse } from "../types.js";

const router = express.Router();

// ‡∏ó‡∏∏‡∏Å route ‡πÉ‡∏ô admin ‡∏ï‡πâ‡∏≠‡∏á login ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô admin
router.use(requireAdmin);

/**
 * GET /api/admin/users
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ user ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin only)
 */
router.get("/users", async (_req: Request, res: Response) => {
  try {
    const users = await db.getAllUsers();

    // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á password ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    const sanitizedUsers = users.map((user) => ({
      id: user.id,
      email: user.email,
      name: user.name,
      isAdmin: user.isAdmin,
      createdAt: user.createdAt,
    }));

    return res.json({
      success: true,
      data: {
        users: sanitizedUsers,
        count: sanitizedUsers.length,
      },
    } as ApiResponse);
  } catch (error) {
    console.error("Get users error:", error);
    return res.status(500).json({
      success: false,
      error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
    } as ApiResponse);
  }
});

/**
 * GET /api/admin/all-urls
 * ‡∏î‡∏∂‡∏á URLs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (Admin only)
 */
router.get("/all-urls", async (_req: Request, res: Response) => {
  try {
    const urls = await db.getAllUrls();

    return res.json({
      success: true,
      data: {
        urls: urls,
        count: urls.length,
      },
    } as ApiResponse);
  } catch (error) {
    console.error("Get all URLs error:", error);
    return res.status(500).json({
      success: false,
      error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
    } as ApiResponse);
  }
});

/**
 * DELETE /api/admin/urls/:shortCode
 * ‡∏•‡∏ö URL (Admin only)
 */
router.delete("/urls/:shortCode", async (req: Request, res: Response) => {
  try {
    const { shortCode } = req.params;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ URL ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const url = await db.getUrl(shortCode);
    if (!url) {
      return res.status(404).json({
        success: false,
        error: "‡πÑ‡∏°‡πà‡∏û‡∏ö URL ‡∏ô‡∏µ‡πâ",
      } as ApiResponse);
    }

    // ‡∏•‡∏ö URL
    const deleted = await db.deleteUrlByShortCode(shortCode);

    if (deleted) {
      return res.json({
        success: true,
        message: "‡∏•‡∏ö URL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      } as ApiResponse);
    } else {
      return res.status(500).json({
        success: false,
        error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö URL ‡πÑ‡∏î‡πâ",
      } as ApiResponse);
    }
  } catch (error) {
    console.error("Delete URL error:", error);
    return res.status(500).json({
      success: false,
      error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
    } as ApiResponse);
  }
});

/**
 * DELETE /api/admin/users/:userId
 * ‡∏•‡∏ö User (Admin only)
 */
router.delete("/users/:userId", async (req: Request, res: Response) => {
  try {
    const { userId } = req.params;
    console.log(
      "üóëÔ∏è [DELETE USER] Request from:",
      req.user?.email,
      "to delete userId:",
      userId
    );

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ User ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const user = await db.findUserById(userId);
    if (!user) {
      console.log("‚ùå [DELETE USER] User not found:", userId);
      return res.status(404).json({
        success: false,
        error: "‡πÑ‡∏°‡πà‡∏û‡∏ö User ‡∏ô‡∏µ‡πâ",
      } as ApiResponse);
    }

    // ‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    if (req.user?.userId === userId) {
      console.log("‚õî [DELETE USER] Cannot delete self:", userId);
      return res.status(403).json({
        success: false,
        error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ",
      } as ApiResponse);
    }

    // ‡∏•‡∏ö User
    console.log("üî® [DELETE USER] Attempting to delete user:", user.email);
    const deleted = await db.deleteUser(userId);
    console.log("üìä [DELETE USER] Deletion result:", deleted);

    if (deleted) {
      console.log("‚úÖ [DELETE USER] User deleted successfully:", userId);
      return res.json({
        success: true,
        message: "‡∏•‡∏ö User ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      } as ApiResponse);
    } else {
      console.log("‚ùå [DELETE USER] Failed to delete user:", userId);
      return res.status(500).json({
        success: false,
        error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö User ‡πÑ‡∏î‡πâ",
      } as ApiResponse);
    }
  } catch (error) {
    console.error("üí• [DELETE USER] Exception:", error);
    return res.status(500).json({
      success: false,
      error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
    } as ApiResponse);
  }
});

export default router;
